from rdkit import Chem
def validity(smiles_list):
    """
    Calculate the percentage of valid SMILES strings.

    Parameters:
    - smiles_list (list): List of SMILES strings.

    Returns:
    - percentage_valid (float): Percentage of valid SMILES strings.
    """

    total_smiles = len(smiles_list)
    valid_smiles = 0

    for smiles in smiles_list:
        mol = Chem.MolFromSmiles(smiles)
        if mol is not None:
            valid_smiles += 1

    if total_smiles == 0:
        return 0.0

    percentage_valid = (valid_smiles / total_smiles) * 100
    return percentage_valid

def novelty(smiles_list, dataset):
    """
    Calculate the novelty of SMILES strings based on a dataset (chembl)

    Parameters:
    - smiles_list (list): List of SMILES strings to check for novelty.
    - dataset (list): Reference dataset of SMILES strings.

    Returns:
    - novelty_percentage (float): Percentage of novel SMILES strings.
    """

    unique_smiles = set(smiles_list)
    unique_reference = set(dataset)

    novel_smiles = unique_smiles - unique_reference

    if not unique_smiles:
        return 0.0

    novelty_percentage = (len(novel_smiles) / len(unique_smiles)) * 100
    return novelty_percentage
